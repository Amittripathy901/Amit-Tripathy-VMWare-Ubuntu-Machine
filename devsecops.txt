#implementing SonarQube Analysis + Trivy Analysis + OWASP Dependency check through Jenkins Pipeline

pipeline {
agent any
tools {
jdk 'jdk-17'
maven 'maven3'
}
environment {
SCANNER_HOME = tool 'sonar-scanner'
// Set the Trivy output report filename
TRIVY_REPORT_FILENAME = 'trivy-report.json'

// Set the OWASP output report filename
OWASP_REPORT_FILENAME = 'dependency-check-report.xml'
}

stages {
stage('git-checkout') {
steps {
git branch: 'main', url: 'https://github.com/Amittripathy901/Boardgame.git'
}
}

stage('Code-Compile') {
steps {
sh "mvn compile"
}
}

stage('Unit-Test') {
steps {
sh "mvn test"
}
}

stage('Sonar Analysis') {
steps {
withSonarQubeEnv('sonar-server') {
sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Boardgame \
-Dsonar.java.binaries=. \
-Dsonar.projectKey=Boardgame '''
}
}
}
stage('OWASP Dependency Check') {
steps {
dependencyCheck additionalArguments: ' --scan . ', odcInstallation: 'DC'
dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
}
}
stage('Trivy File System Scan') {
steps {
echo 'Running Trivy filesystem scan for vulnerabilities, secrets, and misconfigurations...'
sh "trivy fs --format json --output ${TRIVY_REPORT_FILENAME} --scanners vuln,config,secret --severity HIGH,CRITICAL ."
}
}
stage('Code-Build') {
steps {
sh "mvn clean package"
}
}

}
}


